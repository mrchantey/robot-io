{"version":3,"sources":["utility/event.js","ui/RobotHeading.js","systems/dataUtility.js","ui/fileUI.js","ui/App.js","systems/socketClient.js","systems/dataStore.js","systems/dataInputTest.js","factories/entityCreators/chart.js","factories/entityCreators/trace.js","systems/dataEntityManager.js","systems/systems.js","index.js","ui/ui.js"],"names":["module","exports","listeners","addListener","listener","push","invoke","params","forEach","l","RobotHeading","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","now","Date","_this2","timerID","setInterval","tick","clearInterval","setState","react_default","a","createElement","Component","dataUtility","Download","data","name","undefined","dataStr","JSON","stringify","elt","document","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","UploadAsync","Promise","resolve","reject","addEventListener","event","input","target","reader","FileReader","onload","text","result","obj","parse","readAsText","files","FileUI","handleTest","e","isTesting","testText","window","systems","dataInputTest","begin","end","handleLoadRealtime","console","log","stopRealtime","realtimeText","isRealtime","DataUtility","then","dataStore","setDataRealtime","stopDataRealtime","resetData","setData","getData","onClick","handleReset","handleSave","handleLoad","App","className","ui_RobotHeading","isBuddy","fileUI","createSocketClient","debug","arguments","length","socketClient","socket","onData","Event","sendData","emit","io","on","_","err","dir","createDataStore","realtimeIntervalId","onReset","addData","newData","deleteData","nd","onCompleteCallback","startMillis","i","elapsedSeconds","timeStamp","createDataInputTest","intervalID","ent","init","type","id","chartId","settings","mode","value","beginMillis","Math","random","Plotly","require","createChart","_chart","chart","circleAssign","layout","title","showlegend","xaxis","yaxis","traces","el","getElementById","newPlot","initChart","addTrace","trace","addTraces","updateTraces","newTraceDatas","x","map","t","dataBuffer","b","y","indicies","groupEl","extendTraces","count","min","max","assign","autorange","range","relayout","appendTraces","clearDataBuffer","intervalId","destroy","purge","createTrace","_trace","index","concat","line","width","color","GetDefaultSettings","appendDataBuffer","createDataEntityManager","charts","chartDatas","filter","d","find","c","parseInit","parseData","DataStore","SocketClient","dataEntityManager","DataEntityManager","DataInputTest","Systems","ReactDOM","render","src_ui_App"],"mappings":"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","file":"static/js/main.a8950d2d.chunk.js","sourcesContent":["\r\n\r\n\r\n// if (require === undefined)\r\n// export default createEvent\r\n// else\r\nmodule.exports = createEvent\r\nfunction createEvent() {\r\n    const listeners = []\r\n\r\n    function invoke(params) {\r\n        listeners.forEach(l => l(params))\r\n    }\r\n\r\n    function addListener(listener) {\r\n        listeners.push(listener)\r\n    }\r\n\r\n    return {\r\n        addListener,\r\n        invoke\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\n\r\nclass RobotHeading extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { now: Date.now() }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(() => {\r\n            this.tick()\r\n        }, 0);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID)\r\n    }\r\n\r\n    tick() {\r\n        this.setState({\r\n            now: Date.now()\r\n        })\r\n        // this.state.now = Date.now()\r\n    }\r\n\r\n    render() {\r\n        // let time = Date.now()\r\n        // console.dir(this);\r\n\r\n        return (\r\n            <h1>Robot IO</h1>\r\n            // <div className=\"robot-heading\">\r\n            // {`Robot IO, time is ${this.state.now}`}\r\n            // </div >\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default RobotHeading","\r\n\r\nexport default {\r\n    Download,\r\n    UploadAsync\r\n}\r\n\r\n\r\nfunction Download(data) {\r\n    const name = data.name === undefined ? \"data\" : data.name\r\n    const dataStr = JSON.stringify(data)\r\n    const elt = document.createElement('a')\r\n    elt.setAttribute('href', 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr))\r\n    elt.setAttribute('download', name + '.json')\r\n    elt.style.display = 'none'\r\n    document.body.appendChild(elt)\r\n    elt.click()\r\n    document.body.removeChild(elt)\r\n}\r\n\r\nfunction UploadAsync() {\r\n    return new Promise((resolve, reject) => {\r\n        const elt = document.createElement('input')\r\n        elt.setAttribute('type', 'file')\r\n        elt.setAttribute('accept', 'application/json')\r\n        elt.addEventListener('change', OpenFile)\r\n        function OpenFile(event) {\r\n            const input = event.target\r\n            const reader = new FileReader()\r\n            reader.onload = function () {\r\n                const text = reader.result\r\n                const obj = JSON.parse(text)\r\n                resolve(obj)\r\n            }\r\n            reader.readAsText(input.files[0])\r\n        }\r\n        document.body.appendChild(elt)\r\n        elt.click()\r\n        document.body.removeChild(elt)\r\n    })\r\n}\r\n","import React, { Component } from 'react';\r\nimport DataUtility from '../systems/dataUtility'\r\n\r\n\r\nclass FileUI extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            testText: \"Begin Data Test\",\r\n            isTesting: false,\r\n            realtimeText: \"Begin Realtime Load\",\r\n            isRealtime: false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n    handleTest = (e) => {\r\n\r\n        if (this.state.isTesting === false) {\r\n            this.setState({ testText: \"End Data Test\", isTesting: true })\r\n            window.systems.dataInputTest.begin()\r\n\r\n        } else {\r\n            this.setState({ testText: \"Begin Data Test\", isTesting: false })\r\n            window.systems.dataInputTest.end()\r\n        }\r\n    }\r\n\r\n    handleReset() {\r\n        console.log('resetting data..');\r\n        window.systems.dataStore.resetData()\r\n    }\r\n\r\n    handleLoad() {\r\n        console.log('loading data');\r\n        DataUtility.UploadAsync().then(data => {\r\n            window.systems.dataStore.setData(data)\r\n        })\r\n    }\r\n\r\n    handleLoadRealtime = (e) => {\r\n        console.log('loading data realtime');\r\n\r\n\r\n        const startRealtime = () => {\r\n            this.setState({ realtimeText: \"End Realtime Load\", isRealtime: true })\r\n            DataUtility.UploadAsync().then(data => {\r\n                window.systems.dataStore.setDataRealtime(data, stopRealtime)\r\n            })\r\n\r\n        }\r\n        const stopRealtime = () => {\r\n            this.setState({ realtimeText: \"Begin Realtime Load\", isRealtime: false })\r\n        }\r\n\r\n        if (this.state.isRealtime === false) {\r\n            startRealtime()\r\n        } else {\r\n            stopRealtime()\r\n            window.systems.dataStore.stopDataRealtime()\r\n        }\r\n    }\r\n\r\n    handleSave() {\r\n        console.log('saving data');\r\n        const data = window.systems.dataStore.getData()\r\n        DataUtility.Download(data)\r\n        // console.log();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>File</h2>\r\n                <button onClick={this.handleReset}>Reset</button>\r\n                <button onClick={this.handleSave}>Save</button>\r\n                <button onClick={this.handleLoad}>Load</button>\r\n                <button onClick={this.handleLoadRealtime}>{this.state.realtimeText}</button>\r\n                <button onClick={this.handleTest}>{this.state.testText}</button>\r\n            </div>)\r\n    }\r\n\r\n}\r\n\r\nexport default FileUI","import React, { Component } from 'react';\nimport RobotHeading from './RobotHeading'\nimport FileUI from './fileUI';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <RobotHeading isBuddy=\"yeababy\" />\n        <FileUI />\n        {/* <header className=\"App-header\">\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n        </header> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import Event from '../utility/event';\r\nimport io from 'socket.io-client';\r\n// module.exports = createSocketClient\r\n\r\nexport default createSocketClient\r\n\r\n\r\n\r\nfunction createSocketClient(debug = false) {\r\n\r\n    const socketClient = {\r\n        socket: undefined,\r\n        onData: Event(),\r\n        sendData,\r\n    }\r\n    try {\r\n\r\n        //untested!\r\n        // if (window.io !== undefined) {\r\n        console.log('connecting to socket server...');\r\n        socketClient.socket = io()\r\n        socketClient.socket.on('connect', _ => {\r\n            console.log('socket connected!');\r\n        })\r\n        socketClient.socket.on(\"data\", data => {\r\n            socketClient.onData.invoke(data)\r\n        })\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n        return socketClient\r\n    }\r\n    if (debug) {\r\n        socketClient.onData.addListener(data => {\r\n            console.log('data received..');\r\n            console.dir(data);\r\n        })\r\n    }\r\n\r\n    function sendData(data) {\r\n        socketClient.socket.emit(\"data\", data)\r\n    }\r\n\r\n\r\n    return socketClient\r\n}\r\n\r\n","import Event from '../utility/event';\r\n\r\nexport default createDataStore\r\n\r\nfunction createDataStore() {\r\n\r\n    const data = []\r\n    const onData = Event()\r\n    const onReset = Event()\r\n\r\n    function addData(newData) {\r\n        data.push(newData)\r\n        onData.invoke(newData)\r\n    }\r\n\r\n    function resetData() {\r\n        deleteData()\r\n    }\r\n\r\n    function setData(newData = []) {\r\n        deleteData()\r\n        onReset.invoke()\r\n        newData.forEach(nd => addData(nd))\r\n        // newData.forEach(nd => data.push(nd))\r\n    }\r\n\r\n    function deleteData() {\r\n        data.length = 0\r\n        onReset.invoke()\r\n\r\n    }\r\n\r\n    let realtimeIntervalId\r\n\r\n    function setDataRealtime(newData = [], onCompleteCallback) {\r\n        resetData()\r\n        const startMillis = Date.now()\r\n        let i = 0;\r\n\r\n        realtimeIntervalId = setInterval(_ => {\r\n            const elapsedSeconds = (Date.now() - startMillis) / 1000\r\n            while (i < newData.length && (newData[i].timeStamp === undefined || newData[i].timeStamp < elapsedSeconds)) {\r\n                addData(newData[i])\r\n                i++\r\n            }\r\n            if (i >= newData.length) {\r\n                stopDataRealtime()\r\n                onCompleteCallback()\r\n            }\r\n        }, 10)\r\n    }\r\n\r\n    function stopDataRealtime() {\r\n        clearInterval(realtimeIntervalId)\r\n    }\r\n\r\n    function getData() {\r\n        return data\r\n    }\r\n\r\n    return {\r\n        addData,\r\n        onData,\r\n        onReset,\r\n        setData,\r\n        deleteData,\r\n        resetData,\r\n        setDataRealtime,\r\n        stopDataRealtime,\r\n        getData\r\n    }\r\n}\r\n","import Event from '../utility/event';\r\n\r\n\r\nexport default createDataInputTest\r\n\r\n\r\n\r\nfunction createDataInputTest() {\r\n    const onData = Event()\r\n    const onReset = Event()\r\n    const ent = {\r\n        begin,\r\n        end,\r\n        onData,\r\n        onReset\r\n    }\r\n    let intervalID;\r\n\r\n    function begin() {\r\n        window.systems.dataStore.resetData()\r\n        const initData = {\r\n            init: [{\r\n                type: \"chart\",\r\n                id: 0,\r\n                name: \"accelerometer\"\r\n                // layout: {\r\n                //     title: \"accelerometer\",\r\n                //     showlegend: true,\r\n                //     xaxis: { title: \"time (s)\" },\r\n                //     yaxis: { title: \"units\" }\r\n                // plot_bgcolor: '#1E1E1E',\r\n                // }\r\n            },\r\n            {\r\n                type: \"trace\",\r\n                id: 1,\r\n                chartId: 0,\r\n                name: \"x\",\r\n                settings: {\r\n                    mode: \"markers\"\r\n                    // mode: \"lines\"\r\n                }\r\n            }\r\n            ]\r\n        }\r\n        ent.onData.invoke(initData)\r\n        let value = 0\r\n        const beginMillis = Date.now()\r\n        intervalID = setInterval(() => {\r\n            value += Math.random() - 0.499999\r\n            const data = {\r\n                timeStamp: (Date.now() - beginMillis) / 1000,\r\n                data: [{\r\n                    id: 1,\r\n                    value\r\n                }]\r\n            }\r\n            ent.onData.invoke(data)\r\n        }, 100);\r\n\r\n    }\r\n\r\n    function end() {\r\n        clearInterval(intervalID)\r\n        onReset.invoke()\r\n    }\r\n\r\n    return ent\r\n\r\n\r\n}\r\n\r\n\r\n// function begin() {\r\n//     ent.onReset.invoke()\r\n//     // let lastMillis = Date.now()\r\n//     let startMillis = Date.now()\r\n\r\n//     let accX = 0\r\n//     let accY = 0\r\n//     let accZ = 0\r\n//     let gyroX = 0\r\n//     let gyroY = 0\r\n//     let gyroZ = 0\r\n\r\n//     intervalID = setInterval(_ => {\r\n//         let millis = Date.now()\r\n\r\n//         accX += getRandom()\r\n//         accY += getRandom()\r\n//         accZ += getRandom()\r\n//         gyroX += getRandom()\r\n//         gyroY += getRandom()\r\n//         gyroZ += getRandom()\r\n\r\n//         const testData = {\r\n//             mpu:\r\n//             {\r\n//                 acc: { x: accX, y: accY, z: accZ },\r\n//                 gyro: { x: gyroX, y: gyroY, z: gyroZ },\r\n//                 temp: 25\r\n//             },\r\n//             timeStamp: millis - startMillis\r\n//         }\r\n//         // let deltaMillis = millis - lastMillis\r\n//         // lastMillis = millis\r\n//         // testData.timeStamp += 1000\r\n//         // console.log('making data callback');\r\n//         // console.dir(testData);\r\n//         ent.onData.invoke(testData)\r\n//     }, 10);\r\n// }","import circleAssign from 'circle-assign';\r\nconst Plotly = require('plotly.js-dist');\r\n\r\n\r\n// const idCounte\r\n\r\nexport default function createChart(_chart) {\r\n\r\n    const chart = circleAssign({\r\n        layout: {\r\n            title: _chart.name,\r\n            showlegend: true,\r\n            xaxis: { title: \"time (s)\" },\r\n            yaxis: { title: \"units\" },\r\n            // plot_bgcolor: '#1E1E1E',\r\n        },\r\n        traces: []\r\n    }, _chart)\r\n    const el = initChart(chart.layout)\r\n    chart.el = el\r\n\r\n    chart.addTrace = (trace) => {\r\n        chart.traces.push(trace)\r\n        Plotly.addTraces(el, [trace.settings])\r\n    }\r\n\r\n    chart.updateTraces = _ => {\r\n        const newTraceDatas = {\r\n            x: chart.traces.map(t => t.dataBuffer.map(b => b.timeStamp)),\r\n            y: chart.traces.map(t => t.dataBuffer.map(b => b.value)),\r\n            indicies: chart.traces.map((t, i) => i)\r\n        }\r\n        appendTraces(el, newTraceDatas)\r\n        chart.traces.forEach(t => t.clearDataBuffer())\r\n    }\r\n\r\n    const intervalId = setInterval(chart.updateTraces, 100);\r\n    chart.destroy = _ => {\r\n        Plotly.purge(el)\r\n        clearInterval(intervalId)\r\n    }\r\n\r\n\r\n    return chart\r\n}\r\n\r\n\r\n\r\nfunction initChart(layout) {\r\n    const el = document.createElement(\"div\")\r\n    document.getElementById('plot-root').appendChild(el)\r\n    Plotly.newPlot(el, [], layout)\r\n    return el\r\n}\r\nfunction appendTraces(groupEl, newTraceDatas) {\r\n    Plotly.extendTraces(groupEl, { x: newTraceDatas.x, y: newTraceDatas.y }, newTraceDatas.indicies)\r\n    const count = groupEl.data[0].x.length - 1\r\n    const maxPointsDisplayed = 100\r\n    if (count > maxPointsDisplayed) {\r\n        const min = groupEl.data[0].x[count - maxPointsDisplayed]\r\n        const max = groupEl.data[0].x[count]\r\n        const layout = {}\r\n        Object.assign(layout, groupEl.layout)\r\n        Object.assign(layout.xaxis, { autorange: false, range: [min, max] })\r\n        Plotly.relayout(groupEl, layout)\r\n    }\r\n}","import circleAssign from 'circle-assign';\r\n\r\nexport default function createTrace(_trace, chart) {\r\n    const index = chart.el.data.length\r\n    const trace = circleAssign(GetDefaultSettings(_trace), _trace)\r\n    trace.chart = chart\r\n    trace.index = index\r\n    trace.appendDataBuffer = (value, timeStamp) => {\r\n        trace.dataBuffer.push({ value, timeStamp })\r\n    }\r\n\r\n    trace.clearDataBuffer = _ => {\r\n        trace.dataBuffer.length = 0\r\n    }\r\n\r\n    //this is async\r\n    chart.addTrace(trace)\r\n    return trace\r\n}\r\n\r\n\r\nfunction GetDefaultSettings(_trace, index) {\r\n    const name = _trace.name === undefined ? `data ${index}` : _trace.name\r\n    const trace = {\r\n        settings: {\r\n            name: name,\r\n            type: 'scattergl',\r\n            // type: 'line',\r\n            mode: 'lines',\r\n            x: [],\r\n            y: [],\r\n            line: {\r\n                // color: 'rgb(219, 64, 82)',\r\n                width: 3\r\n            },\r\n        },\r\n        dataBuffer: [],\r\n    }\r\n    if (_trace.name === 'x' || _trace.name === 'r' || _trace.name === 'red')\r\n        trace.settings.line.color = 'rgb(255, 0, 0)'\r\n    if (_trace.name === 'y' || _trace.name === 'g' || _trace.name === 'green')\r\n        trace.settings.line.color = 'rgb(0, 255, 0)'\r\n    if (_trace.name === 'z' || _trace.name === 'b' || _trace.name === 'blue')\r\n        trace.settings.line.color = 'rgb(0, 0, 255)'\r\n    return trace\r\n}","// import CreateDataEntity from '../factories/dataEntityCreator';\r\nimport createChart from '../factories/entityCreators/chart';\r\nimport createTrace from '../factories/entityCreators/trace';\r\n\r\nexport default createDataEntityManager\r\n\r\n\r\nfunction createDataEntityManager() {\r\n\r\n    let charts = []\r\n    let traces = []\r\n\r\n\r\n    const manager = {\r\n        charts,\r\n        addData,\r\n        resetData\r\n    }\r\n\r\n\r\n    function addData(data) {\r\n        parseInit(data)\r\n        parseData(data)\r\n    }\r\n\r\n    function parseInit(data) {\r\n        if (data.init === undefined)\r\n            return\r\n        const chartDatas = data.init\r\n            .filter(d => d.type === 'chart')\r\n        charts = chartDatas.map(d => createChart(d))\r\n\r\n        traces = data.init\r\n            .filter(d => d.type === 'trace')\r\n            .map(d => {\r\n                const chart = charts.find(c => c.id === d.chartId)\r\n                return createTrace(d, chart)\r\n            })\r\n    }\r\n    function parseData(data) {\r\n        if (data.data === undefined)\r\n            return\r\n        data.data.forEach(d => {\r\n            const trace = traces.find(t => t.id === d.id)\r\n            if (trace === undefined)\r\n                //TODO IF DOESNT EXIST, CREATE IT\r\n                console.log(`trace not found matching ${d.name}`);\r\n            else {\r\n\r\n                trace.appendDataBuffer(d.value, data.timeStamp)\r\n            }\r\n        })\r\n    }\r\n\r\n    function resetData() {\r\n        charts.forEach(c => c.destroy())\r\n        charts.length = 0\r\n        // entities.forEach(e => e.resetData())\r\n    }\r\n    return manager\r\n}","// const SocketClient = require('./socketClient');\r\n// const DataParser = require('./dataParser');\r\nimport SocketClient from './socketClient';\r\nimport DataStore from './dataStore';\r\nimport DataInputTest from './dataInputTest';\r\n\r\n// module.exports = createRobotIOClient\r\nimport DataEntityManager from './dataEntityManager';\r\nexport default createSystems\r\n\r\n\r\nfunction createSystems() {\r\n    const dataStore = DataStore()\r\n    const socketClient = SocketClient()\r\n    const dataEntityManager = DataEntityManager()\r\n    dataStore.onData.addListener(dataEntityManager.addData)\r\n    dataStore.onReset.addListener(dataEntityManager.resetData)\r\n    // socketClient.onData.addListener(dataStore.addData)\r\n    // socketClient.onData.addListener(dataEntityManager.addData)\r\n\r\n\r\n    const dataInputTest = DataInputTest()\r\n    dataStore.onReset.addListener(dataInputTest.end)\r\n    dataInputTest.onData.addListener(dataStore.addData)\r\n    // dataInputTest.onReset.addListener(dataStore.resetData)\r\n    // dataInputTest.onData.addListener(dataEntityManager.addData)\r\n\r\n\r\n\r\n    const systems = {\r\n        dataEntityManager,\r\n        dataInputTest,\r\n        socketClient,\r\n        dataStore\r\n    }\r\n    window.systems = systems\r\n\r\n\r\n\r\n    return systems\r\n}\r\n","import UI from './ui/ui';\r\nimport Systems from './systems/systems';\r\n// import DataEntityManager from './systems/dataEntityManager';\r\n\r\nSystems()\r\n// const systems = Systems()\r\nUI()","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nexport default _ => ReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}